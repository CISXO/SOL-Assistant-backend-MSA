name: Internal Assistant Deploy

on:
  workflow_call:   # 다른 workflow에서 호출될 수 있도록 설정

jobs:
  build-and-deploy-internal:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. internal-assistant-service application.yml 복원
      - name: Restore internal-assistant-service application.yml
        working-directory: ./internal-assistant-service
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.INTERNAL_YML }}" > src/main/resources/application.yml

      # 4. common-service application-common.yml 복원
      - name: Restore common-service application-common.yml
        working-directory: ./common-service
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.COMMON_YML }}" > src/main/resources/application-common.yml

      # 5. Gradle 빌드
      - name: Build with Gradle
        working-directory: ./internal-assistant-service
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test

      # 6. Docker 설정
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # 7. Docker 이미지 빌드 (ARM64)
      - name: Build Docker image for ARM64
        working-directory: ./internal-assistant-service
        run: docker buildx build --platform linux/arm64 -t internal-assistant-service --load .

      # 8. Docker 이미지 tar로 저장
      - name: Save Docker image to tar
        working-directory: ./internal-assistant-service
        run: docker save internal-assistant-service > internal-assistant-service.tar

      # 9. AWS 인증 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 10. appspec.yml, deploy.sh, tar 파일을 zip으로 묶기
      - name: Create deployment zip
        working-directory: ./internal-assistant-service
        run: |
          zip -r internal-assistant-service-${{ github.sha }}.zip appspec.yml deploy/*.sh internal-assistant-service.tar

      # 11. S3에 업로드
      - name: Upload zip to S3
        working-directory: ./internal-assistant-service
        run: aws s3 cp internal-assistant-service-${{ github.sha }}.zip s3://sol-assistant-s3/internal-assistant-service/

      # 12. CodeDeploy 배포
      - name: Deploy with CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name sol-assistant-deploy \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name backend-internal-zerotime-deploy \
            --s3-location bucket=sol-assistant-s3,bundleType=zip,key=internal-assistant-service/internal-assistant-service-${GITHUB_SHA}.zip
